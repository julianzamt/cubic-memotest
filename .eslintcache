[{"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/index.js":"1","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/App.js":"2","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/reportWebVitals.js":"3","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Cube.js":"4","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Footer.js":"5","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Header.js":"6","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/pages/Board.js":"7","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/helpers/randomFrancellas.js":"8","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/helpers/roll.js":"9","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/config/firebase.js":"10","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/context/AppContext.js":"11","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/context/GlobalState.js":"12","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/Routes.js":"13","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/pages/Registro.js":"14","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Timer.js":"15","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Tries.js":"16","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/pages/Final.js":"17","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Feedback.js":"18","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Scores.js":"19"},{"size":725,"mtime":1614196134050,"results":"20","hashOfConfig":"21"},{"size":2065,"mtime":1614193722333,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1612189430350,"results":"23","hashOfConfig":"21"},{"size":10144,"mtime":1614123659377,"results":"24","hashOfConfig":"21"},{"size":1026,"mtime":1614202267455,"results":"25","hashOfConfig":"21"},{"size":5127,"mtime":1614199043250,"results":"26","hashOfConfig":"21"},{"size":1498,"mtime":1614199620306,"results":"27","hashOfConfig":"21"},{"size":2048,"mtime":1613338475968,"results":"28","hashOfConfig":"21"},{"size":132,"mtime":1612554655270,"results":"29","hashOfConfig":"21"},{"size":575,"mtime":1612644946682,"results":"30","hashOfConfig":"21"},{"size":97,"mtime":1613069961462,"results":"31","hashOfConfig":"21"},{"size":1174,"mtime":1614120032989,"results":"32","hashOfConfig":"21"},{"size":485,"mtime":1613594536042,"results":"33","hashOfConfig":"21"},{"size":4736,"mtime":1613847529601,"results":"34","hashOfConfig":"21"},{"size":1034,"mtime":1614203770826,"results":"35","hashOfConfig":"21"},{"size":310,"mtime":1614202170228,"results":"36","hashOfConfig":"21"},{"size":354,"mtime":1614122878079,"results":"37","hashOfConfig":"21"},{"size":606,"mtime":1614193759850,"results":"38","hashOfConfig":"21"},{"size":402,"mtime":1614201890149,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gpdh7p",{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/index.js",[],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/App.js",["82","83","84","85"],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/reportWebVitals.js",[],["86","87"],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Cube.js",["88","89"],"import React, { useState, useEffect, useContext, useRef } from \"react\"\nimport AppContext from \"../context/AppContext\"\nimport logo from \"../img/cube-outline.svg\"\nimport \"./Cube.css\"\nimport { cubeFrancellas } from \"../helpers/randomFrancellas\"\n\nconst Cube = (props) => {\n    const context = useContext(AppContext)\n\n    // Each card flip state\n    const [frontFlip, setFrontFlip] = useState(false)\n    const [backFlip, setBackFlip] = useState(false)\n    const [leftFlip, setLeftFlip] = useState(false)\n    const [rightFlip, setRightFlip] = useState(false)\n    const [topFlip, setTopFlip] = useState(false)\n    const [bottomFlip, setBottomFlip] = useState(false)\n\n    // Game logic states\n    const [currentCards, setCurrentCards] = useState([])\n    const [currentFaces, setCurrentFaces] = useState([])\n    const [activeFaces, setActiveFaces] = useState([\"front\", \"back\", \"right\", \"left\", \"top\", \"bottom\"])\n    const [cubeScore, setCubeScore] = useState(0)\n\n    const handleClick = (e) => {\n        const eventCard = e.target.getAttribute(\"card\")\n        const face = e.target.getAttribute(\"face\")\n        switch (face) {\n            case \"front\":\n                setFrontFlip(!frontFlip)\n                break\n            case \"back\":\n                setBackFlip(!backFlip)\n                break\n            case \"right\":\n                setRightFlip(!rightFlip)\n                break\n            case \"left\":\n                setLeftFlip(!leftFlip)\n                break\n            case \"top\":\n                setTopFlip(!topFlip)\n                break\n            case \"bottom\":\n                setBottomFlip(!bottomFlip)\n                break\n        }\n        setCurrentCards([\n            ...currentCards,\n            eventCard\n        ])\n        setCurrentFaces([\n            ...currentFaces,\n            face\n        ])\n    }\n\n    useEffect(() => {\n        // copy states used them before next render\n        let activeFacesSync = activeFaces\n        let tries = props.tries\n        let cubeScoreSync = cubeScore\n        if (currentCards.length === 2) {\n            tries = tries - 1\n            props.setTries(tries)\n            console.log(tries)\n\n            // If scored\n            if (currentCards[0] === currentCards[1]) {\n                context.setScore(prevState => prevState + 1)\n                cubeScoreSync = cubeScoreSync + 1\n                setCubeScore(cubeScoreSync)\n                const temp = activeFaces.filter(item => item !== currentFaces[0])\n                activeFacesSync = temp.filter(item => item !== currentFaces[1])\n                setActiveFaces(activeFacesSync)\n                if (cubeScoreSync === 3) {\n                    props.setFinalFlag(true)\n                    props.setWinFlag(true)\n                }\n            }\n            else if (tries === 0) {\n                props.setFinalFlag(true)\n            }\n\n            // reset cards that are not active\n            setTimeout(() => {\n                if (activeFacesSync.includes(\"front\")) { setFrontFlip(false) }\n                if (activeFacesSync.includes(\"back\")) { setBackFlip(false) }\n                if (activeFacesSync.includes(\"left\")) { setLeftFlip(false) }\n                if (activeFacesSync.includes(\"right\")) { setRightFlip(false) }\n                if (activeFacesSync.includes(\"top\")) { setTopFlip(false) }\n                if (activeFacesSync.includes(\"bottom\")) { setBottomFlip(false) }\n            }, 1200)\n            setCurrentCards([])\n            setCurrentFaces([])\n        }\n    }, [currentCards, activeFaces, context, currentFaces])\n\n    /* Rotate on drag*/\n\n    // Cube drag states\n    const [drag, setDrag] = useState(false)\n    const [x0, setX0] = useState(null)\n    const [y0, setY0] = useState(null)\n    const A = .2;\n\n    const _C = useRef(null)\n\n    /* helper function to handle both mouse and touch */\n    function getE(ev) { return ev.touches ? ev.touches[0] : ev };\n\n    function lock(ev) {\n        let e = getE(ev);\n\n        setDrag(true)\n        setX0(e.clientX)\n        setY0(e.clientY)\n    };\n\n    function rotate(ev) {\n        if (drag) {\n            let e = getE(ev),\n                x = e.clientX, y = e.clientY,\n                dx = x - x0, dy = y - y0,\n                d = Math.hypot(dx, dy);\n\n            if (d) {\n                _C.current.style.setProperty('--p', getComputedStyle(_C.current).transform.replace('none', ''));\n                _C.current.style.setProperty('--a', `${+(A * d).toFixed(2)}deg`);\n                _C.current.style.setProperty('--i', (-dy).toFixed(2));\n                _C.current.style.setProperty('--j', +(dx).toFixed(2));\n\n                setX0(x)\n                setY0(y)\n            }\n        }\n    };\n\n    function release(ev) {\n        if (drag) {\n            setDrag(false)\n            setX0(null)\n            setY0(null)\n        }\n    };\n\n    useEffect(() => {\n        console.log(_C)\n    }, [])\n\n    return (\n        <div className=\"scene\"\n            onMouseDown={lock}\n            onMouseMove={rotate}\n            onMouseUp={release}\n            onTouchStart={lock}\n            onTouchMove={rotate}\n            onTouchEnd={release}\n        >\n            <div className=\"cube\" ref={_C}>\n                <div className=\"cube__face cube__face--front\">\n                    <div className=\"card__scene\">\n                        <div className={`card__object ${frontFlip ? \"is-flipped\" : null}`} >\n                            <div className=\"card__face card__face--front\" onClick={handleClick} card={cubeFrancellas[0]} face=\"front\">\n                                <img src={logo} alt=\"cube logo\" width=\"100%\" height=\"100%\" card={cubeFrancellas[0]} face=\"front\" />\n                            </div>\n                            <div className=\"card__face card__face--back\">\n                                <img src={cubeFrancellas[0]} alt=\"francella\" width=\"100%\" height=\"100%\" className=\"francella\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"cube__face cube__face--back\">\n                    <div className=\"card__scene\">\n                        <div className={`card__object ${backFlip ? \"is-flipped\" : null}`}  >\n                            <div className=\"card__face card__face--front\" card={cubeFrancellas[1]} face=\"back\" onClick={handleClick}>\n                                <img src={logo} alt=\"\" width=\"100%\" height=\"100%\" card={cubeFrancellas[1]} face=\"back\" />\n                            </div>\n                            <div className=\"card__face card__face--back\">\n                                <img src={cubeFrancellas[1]} alt=\"francella-2\" width=\"100%\" height=\"100%\" className=\"francella\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"cube__face cube__face--right\">\n                    <div className=\"card__scene\">\n                        <div className={`card__object ${rightFlip ? \"is-flipped\" : null}`}  >\n                            <div className=\"card__face card__face--front\" card={cubeFrancellas[2]} face=\"right\" onClick={handleClick}>\n                                <img src={logo} alt=\"\" width=\"100%\" height=\"100%\" card={cubeFrancellas[2]} face=\"right\" />\n                            </div>\n                            <div className=\"card__face card__face--back\">\n                                <img src={cubeFrancellas[2]} alt=\"francella-2\" width=\"100%\" height=\"100%\" className=\"francella\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"cube__face cube__face--left\">\n                    <div className=\"card__scene\">\n                        <div className={`card__object ${leftFlip ? \"is-flipped\" : null}`} >\n                            <div className=\"card__face card__face--front\" card={cubeFrancellas[3]} face=\"left\" onClick={handleClick}>\n                                <img src={logo} alt=\"\" width=\"100%\" height=\"100%\" card={cubeFrancellas[3]} face=\"left\" />\n                            </div>\n                            <div className=\"card__face card__face--back\">\n                                <img src={cubeFrancellas[3]} alt=\"francella-1\" width=\"100%\" height=\"100%\" className=\"francella\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"cube__face cube__face--top\">\n                    <div className=\"card__scene\">\n                        <div className={`card__object ${topFlip ? \"is-flipped\" : null}`} >\n                            <div className=\"card__face card__face--front\" card={cubeFrancellas[4]} face=\"top\" onClick={handleClick}>\n                                <img src={logo} alt=\"\" width=\"100%\" height=\"100%\" card={cubeFrancellas[4]} face=\"top\" />\n                            </div>\n                            <div className=\"card__face card__face--back\">\n                                <img src={cubeFrancellas[4]} alt=\"francella-3\" width=\"100%\" height=\"100%\" className=\"francella\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"cube__face cube__face--bottom\">\n                    <div className=\"card__scene\">\n                        <div className={`card__object ${bottomFlip ? \"is-flipped\" : null}`} >\n                            <div className=\"card__face card__face--front\" card={cubeFrancellas[5]} face=\"bottom\" onClick={handleClick}>\n                                <img src={logo} alt=\"\" width=\"100%\" height=\"100%\" card={cubeFrancellas[5]} face=\"bottom\" />\n                            </div>\n                            <div className=\"card__face card__face--back\">\n                                <img src={cubeFrancellas[5]} alt=\"francella-3\" width=\"100%\" height=\"100%\" className=\"francella\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Cube",["90","91"],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Footer.js",["92"],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Header.js",[],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/pages/Board.js",[],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/helpers/randomFrancellas.js",[],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/helpers/roll.js",[],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/config/firebase.js",[],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/context/AppContext.js",[],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/context/GlobalState.js",[],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/Routes.js",[],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/pages/Registro.js",[],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Timer.js",["93"],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Tries.js",[],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/pages/Final.js",["94"],"import React, { useContext } from \"react\"\nimport AppContext from \"../context/AppContext\"\n\nconst Final = (props) => {\n    const context = useContext(AppContext)\n\n    return (\n        <div>\n            {\n                props.winFlag ? <div>Win! :)</div> :\n                    <div>Loose :(</div>\n\n            }\n        </div>\n    )\n}\n\nexport default Final","/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Feedback.js",[],"/Users/julianzamt/Desktop/PROGRAMMING/react/cubic-memotest/src/components/Scores.js",[],{"ruleId":"95","severity":1,"message":"96","line":9,"column":8,"nodeType":"97","messageId":"98","endLine":9,"endColumn":13},{"ruleId":"95","severity":1,"message":"99","line":16,"column":12,"nodeType":"97","messageId":"98","endLine":16,"endColumn":19},{"ruleId":"95","severity":1,"message":"100","line":17,"column":12,"nodeType":"97","messageId":"98","endLine":17,"endColumn":21},{"ruleId":"95","severity":1,"message":"101","line":19,"column":11,"nodeType":"97","messageId":"98","endLine":19,"endColumn":18},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":27,"column":9,"nodeType":"108","messageId":"109","endLine":46,"endColumn":10},{"ruleId":"110","severity":1,"message":"111","line":96,"column":8,"nodeType":"112","endLine":96,"endColumn":58,"suggestions":"113"},{"ruleId":"102","replacedBy":"114"},{"ruleId":"104","replacedBy":"115"},{"ruleId":"95","severity":1,"message":"116","line":1,"column":8,"nodeType":"97","messageId":"98","endLine":1,"endColumn":21},{"ruleId":"95","severity":1,"message":"117","line":23,"column":12,"nodeType":"97","messageId":"98","endLine":23,"endColumn":21},{"ruleId":"95","severity":1,"message":"101","line":5,"column":11,"nodeType":"97","messageId":"98","endLine":5,"endColumn":18},"no-unused-vars","'Final' is defined but never used.","Identifier","unusedVar","'winFlag' is assigned a value but never used.","'finalFlag' is assigned a value but never used.","'context' is assigned a value but never used.","no-native-reassign",["118"],"no-negated-in-lhs",["119"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cubeScore' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["120"],["118"],["119"],"'InstagramIcon' is defined but never used.","'startTime' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},"Update the dependencies array to be: [currentCards, activeFaces, context, currentFaces, props, cubeScore]",{"range":"123","text":"124"},[3502,3552],"[currentCards, activeFaces, context, currentFaces, props, cubeScore]"]